import {
  $,
  __async,
  __spreadValues,
  decodeAIStreamChunk
} from "./chunk-CENOSGDG.mjs";

// svelte/use-completion.ts
import { get, writable } from "svelte/store";
var uniqueId = 0;
var store = {};
function useCompletion({
  api = "/api/completion",
  id,
  initialCompletion = "",
  initialInput = "",
  headers,
  body,
  onResponse,
  onFinish,
  onError
} = {}) {
  const completionId = id || `completion-${uniqueId++}`;
  const key = `${api}|${completionId}`;
  const { data, mutate: originalMutate } = $(key, {
    fetcher: () => store[key] || initialCompletion,
    initialData: initialCompletion
  });
  data.set(initialCompletion);
  const mutate = (data2) => {
    store[key] = data2;
    return originalMutate(data2);
  };
  const completion = data;
  const error = writable(void 0);
  const isLoading = writable(false);
  let abortController = null;
  function triggerRequest(prompt) {
    return __async(this, null, function* () {
      try {
        isLoading.set(true);
        abortController = new AbortController();
        mutate("");
        const res = yield fetch(api, {
          method: "POST",
          body: JSON.stringify(__spreadValues({
            prompt
          }, body)),
          headers: headers || {},
          signal: abortController.signal
        }).catch((err) => {
          throw err;
        });
        if (onResponse) {
          try {
            yield onResponse(res);
          } catch (err) {
            throw err;
          }
        }
        if (!res.ok) {
          throw new Error(
            (yield res.text()) || "Failed to fetch the chat response."
          );
        }
        if (!res.body) {
          throw new Error("The response body is empty.");
        }
        let result = "";
        const reader = res.body.getReader();
        while (true) {
          const { done, value } = yield reader.read();
          if (done) {
            break;
          }
          result += decodeAIStreamChunk(value);
          mutate(result);
          if (abortController === null) {
            reader.cancel();
            break;
          }
        }
        if (onFinish) {
          onFinish(prompt, result);
        }
        abortController = null;
        return result;
      } catch (err) {
        if (err.name === "AbortError") {
          abortController = null;
          return null;
        }
        if (onError && error instanceof Error) {
          onError(error);
        }
        error.set(err);
      } finally {
        isLoading.set(false);
      }
    });
  }
  const complete = (prompt) => __async(this, null, function* () {
    return triggerRequest(prompt);
  });
  const stop = () => {
    if (abortController) {
      abortController.abort();
      abortController = null;
    }
  };
  const setCompletion = (completion2) => {
    mutate(completion2);
  };
  const input = writable(initialInput);
  const handleSubmit = (e) => {
    e.preventDefault();
    const inputValue = get(input);
    if (!inputValue)
      return;
    return complete(inputValue);
  };
  return {
    completion,
    complete,
    error,
    stop,
    setCompletion,
    input,
    handleSubmit,
    isLoading
  };
}

export {
  useCompletion
};
