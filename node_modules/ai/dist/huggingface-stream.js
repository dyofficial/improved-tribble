"use strict";
var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);
var __async = (__this, __arguments, generator) => {
  return new Promise((resolve, reject) => {
    var fulfilled = (value) => {
      try {
        step(generator.next(value));
      } catch (e) {
        reject(e);
      }
    };
    var rejected = (value) => {
      try {
        step(generator.throw(value));
      } catch (e) {
        reject(e);
      }
    };
    var step = (x) => x.done ? resolve(x.value) : Promise.resolve(x.value).then(fulfilled, rejected);
    step((generator = generator.apply(__this, __arguments)).next());
  });
};

// streams/huggingface-stream.ts
var huggingface_stream_exports = {};
__export(huggingface_stream_exports, {
  HuggingFaceStream: () => HuggingFaceStream
});
module.exports = __toCommonJS(huggingface_stream_exports);

// streams/ai-stream.ts
var import_eventsource_parser = require("eventsource-parser");
function createCallbacksTransformer(callbacks) {
  const encoder = new TextEncoder();
  let fullResponse = "";
  const { onStart, onToken, onCompletion } = callbacks || {};
  return new TransformStream({
    start() {
      return __async(this, null, function* () {
        if (onStart)
          yield onStart();
      });
    },
    transform(message, controller) {
      return __async(this, null, function* () {
        controller.enqueue(encoder.encode(message));
        if (onToken)
          yield onToken(message);
        if (onCompletion)
          fullResponse += message;
      });
    },
    flush() {
      return __async(this, null, function* () {
        yield onCompletion == null ? void 0 : onCompletion(fullResponse);
      });
    }
  });
}
function trimStartOfStreamHelper() {
  let start = true;
  return (text) => {
    if (start)
      text = text.trimStart();
    if (text)
      start = false;
    return text;
  };
}

// streams/huggingface-stream.ts
function createParser2(res) {
  const trimStartOfStream = trimStartOfStreamHelper();
  return new ReadableStream({
    pull(controller) {
      return __async(this, null, function* () {
        var _a2, _b;
        const { value, done } = yield res.next();
        if (done) {
          controller.close();
          return;
        }
        const text = trimStartOfStream((_b = (_a2 = value.token) == null ? void 0 : _a2.text) != null ? _b : "");
        if (!text)
          return;
        if (value.generated_text != null && value.generated_text.length > 0) {
          controller.close();
          return;
        }
        if (text === "</s>" || text === "<|endoftext|>") {
          controller.close();
        } else {
          controller.enqueue(text);
        }
      });
    }
  });
}
function HuggingFaceStream(res, callbacks) {
  return createParser2(res).pipeThrough(createCallbacksTransformer(callbacks));
}
// Annotate the CommonJS export names for ESM import in node:
0 && (module.exports = {
  HuggingFaceStream
});
