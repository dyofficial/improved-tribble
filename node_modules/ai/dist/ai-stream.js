"use strict";
var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);
var __async = (__this, __arguments, generator) => {
  return new Promise((resolve, reject) => {
    var fulfilled = (value) => {
      try {
        step(generator.next(value));
      } catch (e) {
        reject(e);
      }
    };
    var rejected = (value) => {
      try {
        step(generator.throw(value));
      } catch (e) {
        reject(e);
      }
    };
    var step = (x) => x.done ? resolve(x.value) : Promise.resolve(x.value).then(fulfilled, rejected);
    step((generator = generator.apply(__this, __arguments)).next());
  });
};

// streams/ai-stream.ts
var ai_stream_exports = {};
__export(ai_stream_exports, {
  AIStream: () => AIStream,
  createCallbacksTransformer: () => createCallbacksTransformer,
  createEventStreamTransformer: () => createEventStreamTransformer,
  trimStartOfStreamHelper: () => trimStartOfStreamHelper
});
module.exports = __toCommonJS(ai_stream_exports);
var import_eventsource_parser = require("eventsource-parser");
function createEventStreamTransformer(customParser) {
  const decoder = new TextDecoder();
  let parser;
  return new TransformStream({
    start(controller) {
      return __async(this, null, function* () {
        function onParse(event) {
          if (event.type === "event") {
            const data = event.data;
            if (data === "[DONE]") {
              controller.terminate();
              return;
            }
            const message = customParser(data);
            if (message)
              controller.enqueue(message);
          }
        }
        parser = (0, import_eventsource_parser.createParser)(onParse);
      });
    },
    transform(chunk) {
      parser.feed(decoder.decode(chunk));
    }
  });
}
function createCallbacksTransformer(callbacks) {
  const encoder = new TextEncoder();
  let fullResponse = "";
  const { onStart, onToken, onCompletion } = callbacks || {};
  return new TransformStream({
    start() {
      return __async(this, null, function* () {
        if (onStart)
          yield onStart();
      });
    },
    transform(message, controller) {
      return __async(this, null, function* () {
        controller.enqueue(encoder.encode(message));
        if (onToken)
          yield onToken(message);
        if (onCompletion)
          fullResponse += message;
      });
    },
    flush() {
      return __async(this, null, function* () {
        yield onCompletion == null ? void 0 : onCompletion(fullResponse);
      });
    }
  });
}
function trimStartOfStreamHelper() {
  let start = true;
  return (text) => {
    if (start)
      text = text.trimStart();
    if (text)
      start = false;
    return text;
  };
}
function AIStream(res, customParser, callbacks) {
  if (!res.ok) {
    throw new Error(
      `Failed to convert the response to stream. Received status code: ${res.status}.`
    );
  }
  const stream = res.body || new ReadableStream({
    start(controller) {
      controller.close();
    }
  });
  return stream.pipeThrough(createEventStreamTransformer(customParser)).pipeThrough(createCallbacksTransformer(callbacks));
}
// Annotate the CommonJS export names for ESM import in node:
0 && (module.exports = {
  AIStream,
  createCallbacksTransformer,
  createEventStreamTransformer,
  trimStartOfStreamHelper
});
