import {
  __async
} from "./chunk-2L3ZO4UM.mjs";

// streams/ai-stream.ts
import {
  createParser
} from "eventsource-parser";
function createEventStreamTransformer(customParser) {
  const decoder = new TextDecoder();
  let parser;
  return new TransformStream({
    start(controller) {
      return __async(this, null, function* () {
        function onParse(event) {
          if (event.type === "event") {
            const data = event.data;
            if (data === "[DONE]") {
              controller.terminate();
              return;
            }
            const message = customParser(data);
            if (message)
              controller.enqueue(message);
          }
        }
        parser = createParser(onParse);
      });
    },
    transform(chunk) {
      parser.feed(decoder.decode(chunk));
    }
  });
}
function createCallbacksTransformer(callbacks) {
  const encoder = new TextEncoder();
  let fullResponse = "";
  const { onStart, onToken, onCompletion } = callbacks || {};
  return new TransformStream({
    start() {
      return __async(this, null, function* () {
        if (onStart)
          yield onStart();
      });
    },
    transform(message, controller) {
      return __async(this, null, function* () {
        controller.enqueue(encoder.encode(message));
        if (onToken)
          yield onToken(message);
        if (onCompletion)
          fullResponse += message;
      });
    },
    flush() {
      return __async(this, null, function* () {
        yield onCompletion == null ? void 0 : onCompletion(fullResponse);
      });
    }
  });
}
function trimStartOfStreamHelper() {
  let start = true;
  return (text) => {
    if (start)
      text = text.trimStart();
    if (text)
      start = false;
    return text;
  };
}
function AIStream(res, customParser, callbacks) {
  if (!res.ok) {
    throw new Error(
      `Failed to convert the response to stream. Received status code: ${res.status}.`
    );
  }
  const stream = res.body || new ReadableStream({
    start(controller) {
      controller.close();
    }
  });
  return stream.pipeThrough(createEventStreamTransformer(customParser)).pipeThrough(createCallbacksTransformer(callbacks));
}

export {
  createEventStreamTransformer,
  createCallbacksTransformer,
  trimStartOfStreamHelper,
  AIStream
};
