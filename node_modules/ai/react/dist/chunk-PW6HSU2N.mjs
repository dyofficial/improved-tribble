'use client'
import {
  __async,
  __spreadValues,
  decodeAIStreamChunk
} from "./chunk-6EH3SWMP.mjs";

// react/use-completion.ts
import { useCallback, useEffect, useId, useRef, useState } from "react";
import useSWRMutation from "swr/mutation";
import useSWR from "swr";
function useCompletion({
  api = "/api/completion",
  id,
  initialCompletion = "",
  initialInput = "",
  headers,
  body,
  onResponse,
  onFinish,
  onError
} = {}) {
  const hookId = useId();
  const completionId = id || hookId;
  const { data, mutate } = useSWR([api, completionId], null, {
    fallbackData: initialCompletion
  });
  const completion = data;
  const [abortController, setAbortController] = useState(null);
  const extraMetadataRef = useRef({
    headers,
    body
  });
  useEffect(() => {
    extraMetadataRef.current = {
      headers,
      body
    };
  }, [headers, body]);
  const { error, trigger, isMutating } = useSWRMutation(
    [api, completionId],
    (_0, _1) => __async(this, [_0, _1], function* (_, { arg: prompt }) {
      try {
        const abortController2 = new AbortController();
        setAbortController(abortController2);
        mutate("", false);
        const res = yield fetch(api, {
          method: "POST",
          body: JSON.stringify(__spreadValues({
            prompt
          }, extraMetadataRef.current.body)),
          headers: extraMetadataRef.current.headers || {},
          signal: abortController2.signal
        }).catch((err) => {
          throw err;
        });
        if (onResponse) {
          try {
            yield onResponse(res);
          } catch (err) {
            throw err;
          }
        }
        if (!res.ok) {
          throw new Error(
            (yield res.text()) || "Failed to fetch the chat response."
          );
        }
        if (!res.body) {
          throw new Error("The response body is empty.");
        }
        let result = "";
        const reader = res.body.getReader();
        while (true) {
          const { done, value } = yield reader.read();
          if (done) {
            break;
          }
          result += decodeAIStreamChunk(value);
          mutate(result, false);
          if (abortController2 === null) {
            reader.cancel();
            break;
          }
        }
        if (onFinish) {
          onFinish(prompt, result);
        }
        setAbortController(null);
        return result;
      } catch (err) {
        if (err.name === "AbortError") {
          setAbortController(null);
          return null;
        }
        if (onError && err instanceof Error) {
          onError(err);
        }
        throw err;
      }
    }),
    {
      populateCache: false,
      revalidate: false
    }
  );
  const stop = useCallback(() => {
    if (abortController) {
      abortController.abort();
      setAbortController(null);
    }
  }, [abortController]);
  const setCompletion = useCallback(
    (completion2) => {
      mutate(completion2, false);
    },
    [mutate]
  );
  const [input, setInput] = useState(initialInput);
  const handleSubmit = useCallback(
    (e) => {
      e.preventDefault();
      if (!input)
        return;
      return trigger(input);
    },
    [input, trigger]
  );
  const handleInputChange = (e) => {
    setInput(e.target.value);
  };
  const complete = useCallback(
    (prompt) => __async(this, null, function* () {
      return trigger(prompt);
    }),
    [trigger]
  );
  return {
    completion,
    complete,
    error,
    setCompletion,
    stop,
    input,
    setInput,
    handleInputChange,
    handleSubmit,
    isLoading: isMutating
  };
}

export {
  useCompletion
};
