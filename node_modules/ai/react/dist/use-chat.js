'use client'
"use strict";
var __create = Object.create;
var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __getOwnPropSymbols = Object.getOwnPropertySymbols;
var __getProtoOf = Object.getPrototypeOf;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __propIsEnum = Object.prototype.propertyIsEnumerable;
var __defNormalProp = (obj, key, value) => key in obj ? __defProp(obj, key, { enumerable: true, configurable: true, writable: true, value }) : obj[key] = value;
var __spreadValues = (a, b) => {
  for (var prop in b || (b = {}))
    if (__hasOwnProp.call(b, prop))
      __defNormalProp(a, prop, b[prop]);
  if (__getOwnPropSymbols)
    for (var prop of __getOwnPropSymbols(b)) {
      if (__propIsEnum.call(b, prop))
        __defNormalProp(a, prop, b[prop]);
    }
  return a;
};
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toESM = (mod, isNodeMode, target) => (target = mod != null ? __create(__getProtoOf(mod)) : {}, __copyProps(
  // If the importer is in node compatibility mode or this is not an ESM
  // file that has been converted to a CommonJS file using a Babel-
  // compatible transform (i.e. "__esModule" has not been set), then set
  // "default" to the CommonJS "module.exports" for node compatibility.
  isNodeMode || !mod || !mod.__esModule ? __defProp(target, "default", { value: mod, enumerable: true }) : target,
  mod
));
var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);
var __async = (__this, __arguments, generator) => {
  return new Promise((resolve, reject) => {
    var fulfilled = (value) => {
      try {
        step(generator.next(value));
      } catch (e) {
        reject(e);
      }
    };
    var rejected = (value) => {
      try {
        step(generator.throw(value));
      } catch (e) {
        reject(e);
      }
    };
    var step = (x) => x.done ? resolve(x.value) : Promise.resolve(x.value).then(fulfilled, rejected);
    step((generator = generator.apply(__this, __arguments)).next());
  });
};

// react/use-chat.ts
var use_chat_exports = {};
__export(use_chat_exports, {
  useChat: () => useChat
});
module.exports = __toCommonJS(use_chat_exports);
var import_react = require("react");
var import_mutation = __toESM(require("swr/mutation"));
var import_swr = __toESM(require("swr"));

// shared/utils.ts
var import_nanoid = require("nanoid");
var nanoid = (0, import_nanoid.customAlphabet)(
  "0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz",
  7
);
var decoder = new TextDecoder();
function decodeAIStreamChunk(chunk) {
  return decoder.decode(chunk);
}

// react/use-chat.ts
function useChat({
  api = "/api/chat",
  id,
  initialMessages = [],
  initialInput = "",
  sendExtraMessageFields,
  onResponse,
  onFinish,
  onError,
  headers,
  body
} = {}) {
  const hookId = (0, import_react.useId)();
  const chatId = id || hookId;
  const { data, mutate } = (0, import_swr.default)([api, chatId], null, {
    fallbackData: initialMessages
  });
  const messages = data;
  const messagesRef = (0, import_react.useRef)(messages);
  (0, import_react.useEffect)(() => {
    messagesRef.current = messages;
  }, [messages]);
  const abortControllerRef = (0, import_react.useRef)(null);
  const extraMetadataRef = (0, import_react.useRef)({
    headers,
    body
  });
  (0, import_react.useEffect)(() => {
    extraMetadataRef.current = {
      headers,
      body
    };
  }, [headers, body]);
  const { error, trigger, isMutating } = (0, import_mutation.default)(
    [api, chatId],
    (_0, _1) => __async(this, [_0, _1], function* (_, { arg: messagesSnapshot }) {
      try {
        const abortController = new AbortController();
        abortControllerRef.current = abortController;
        const previousMessages = messagesRef.current;
        mutate(messagesSnapshot, false);
        const res = yield fetch(api, {
          method: "POST",
          body: JSON.stringify(__spreadValues({
            messages: sendExtraMessageFields ? messagesSnapshot : messagesSnapshot.map(({ role, content }) => ({
              role,
              content
            }))
          }, extraMetadataRef.current.body)),
          headers: extraMetadataRef.current.headers || {},
          signal: abortController.signal
        }).catch((err) => {
          mutate(previousMessages, false);
          throw err;
        });
        if (onResponse) {
          try {
            yield onResponse(res);
          } catch (err) {
            throw err;
          }
        }
        if (!res.ok) {
          mutate(previousMessages, false);
          throw new Error(
            (yield res.text()) || "Failed to fetch the chat response."
          );
        }
        if (!res.body) {
          throw new Error("The response body is empty.");
        }
        let result = "";
        const createdAt = /* @__PURE__ */ new Date();
        const replyId = nanoid();
        const reader = res.body.getReader();
        while (true) {
          const { done, value } = yield reader.read();
          if (done) {
            break;
          }
          result += decodeAIStreamChunk(value);
          mutate(
            [
              ...messagesSnapshot,
              {
                id: replyId,
                createdAt,
                content: result,
                role: "assistant"
              }
            ],
            false
          );
          if (abortControllerRef.current === null) {
            reader.cancel();
            break;
          }
        }
        if (onFinish) {
          onFinish({
            id: replyId,
            createdAt,
            content: result,
            role: "assistant"
          });
        }
        abortControllerRef.current = null;
        return result;
      } catch (err) {
        if (err.name === "AbortError") {
          abortControllerRef.current = null;
          return null;
        }
        if (onError && err instanceof Error) {
          onError(err);
        }
        throw err;
      }
    }),
    {
      populateCache: false,
      revalidate: false
    }
  );
  const append = (0, import_react.useCallback)(
    (message) => __async(this, null, function* () {
      if (!message.id) {
        message.id = nanoid();
      }
      return trigger(messagesRef.current.concat(message));
    }),
    [trigger]
  );
  const reload = (0, import_react.useCallback)(() => __async(this, null, function* () {
    if (messagesRef.current.length === 0)
      return null;
    const lastMessage = messagesRef.current[messagesRef.current.length - 1];
    if (lastMessage.role === "assistant") {
      return trigger(messagesRef.current.slice(0, -1));
    }
    return trigger(messagesRef.current);
  }), [trigger]);
  const stop = (0, import_react.useCallback)(() => {
    if (abortControllerRef.current) {
      abortControllerRef.current.abort();
      abortControllerRef.current = null;
    }
  }, []);
  const setMessages = (0, import_react.useCallback)(
    (messages2) => {
      mutate(messages2, false);
      messagesRef.current = messages2;
    },
    [mutate]
  );
  const [input, setInput] = (0, import_react.useState)(initialInput);
  const handleSubmit = (0, import_react.useCallback)(
    (e) => {
      e.preventDefault();
      if (!input)
        return;
      append({
        content: input,
        role: "user"
      });
      setInput("");
    },
    [input, append]
  );
  const handleInputChange = (e) => {
    setInput(e.target.value);
  };
  return {
    messages,
    error,
    append,
    reload,
    stop,
    setMessages,
    input,
    setInput,
    handleInputChange,
    handleSubmit,
    isLoading: isMutating
  };
}
// Annotate the CommonJS export names for ESM import in node:
0 && (module.exports = {
  useChat
});
