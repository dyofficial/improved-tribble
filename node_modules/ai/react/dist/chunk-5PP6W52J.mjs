'use client'
import {
  __async,
  __spreadValues,
  decodeAIStreamChunk,
  nanoid
} from "./chunk-6EH3SWMP.mjs";

// react/use-chat.ts
import { useCallback, useId, useRef, useEffect, useState } from "react";
import useSWRMutation from "swr/mutation";
import useSWR from "swr";
function useChat({
  api = "/api/chat",
  id,
  initialMessages = [],
  initialInput = "",
  sendExtraMessageFields,
  onResponse,
  onFinish,
  onError,
  headers,
  body
} = {}) {
  const hookId = useId();
  const chatId = id || hookId;
  const { data, mutate } = useSWR([api, chatId], null, {
    fallbackData: initialMessages
  });
  const messages = data;
  const messagesRef = useRef(messages);
  useEffect(() => {
    messagesRef.current = messages;
  }, [messages]);
  const abortControllerRef = useRef(null);
  const extraMetadataRef = useRef({
    headers,
    body
  });
  useEffect(() => {
    extraMetadataRef.current = {
      headers,
      body
    };
  }, [headers, body]);
  const { error, trigger, isMutating } = useSWRMutation(
    [api, chatId],
    (_0, _1) => __async(this, [_0, _1], function* (_, { arg: messagesSnapshot }) {
      try {
        const abortController = new AbortController();
        abortControllerRef.current = abortController;
        const previousMessages = messagesRef.current;
        mutate(messagesSnapshot, false);
        const res = yield fetch(api, {
          method: "POST",
          body: JSON.stringify(__spreadValues({
            messages: sendExtraMessageFields ? messagesSnapshot : messagesSnapshot.map(({ role, content }) => ({
              role,
              content
            }))
          }, extraMetadataRef.current.body)),
          headers: extraMetadataRef.current.headers || {},
          signal: abortController.signal
        }).catch((err) => {
          mutate(previousMessages, false);
          throw err;
        });
        if (onResponse) {
          try {
            yield onResponse(res);
          } catch (err) {
            throw err;
          }
        }
        if (!res.ok) {
          mutate(previousMessages, false);
          throw new Error(
            (yield res.text()) || "Failed to fetch the chat response."
          );
        }
        if (!res.body) {
          throw new Error("The response body is empty.");
        }
        let result = "";
        const createdAt = /* @__PURE__ */ new Date();
        const replyId = nanoid();
        const reader = res.body.getReader();
        while (true) {
          const { done, value } = yield reader.read();
          if (done) {
            break;
          }
          result += decodeAIStreamChunk(value);
          mutate(
            [
              ...messagesSnapshot,
              {
                id: replyId,
                createdAt,
                content: result,
                role: "assistant"
              }
            ],
            false
          );
          if (abortControllerRef.current === null) {
            reader.cancel();
            break;
          }
        }
        if (onFinish) {
          onFinish({
            id: replyId,
            createdAt,
            content: result,
            role: "assistant"
          });
        }
        abortControllerRef.current = null;
        return result;
      } catch (err) {
        if (err.name === "AbortError") {
          abortControllerRef.current = null;
          return null;
        }
        if (onError && err instanceof Error) {
          onError(err);
        }
        throw err;
      }
    }),
    {
      populateCache: false,
      revalidate: false
    }
  );
  const append = useCallback(
    (message) => __async(this, null, function* () {
      if (!message.id) {
        message.id = nanoid();
      }
      return trigger(messagesRef.current.concat(message));
    }),
    [trigger]
  );
  const reload = useCallback(() => __async(this, null, function* () {
    if (messagesRef.current.length === 0)
      return null;
    const lastMessage = messagesRef.current[messagesRef.current.length - 1];
    if (lastMessage.role === "assistant") {
      return trigger(messagesRef.current.slice(0, -1));
    }
    return trigger(messagesRef.current);
  }), [trigger]);
  const stop = useCallback(() => {
    if (abortControllerRef.current) {
      abortControllerRef.current.abort();
      abortControllerRef.current = null;
    }
  }, []);
  const setMessages = useCallback(
    (messages2) => {
      mutate(messages2, false);
      messagesRef.current = messages2;
    },
    [mutate]
  );
  const [input, setInput] = useState(initialInput);
  const handleSubmit = useCallback(
    (e) => {
      e.preventDefault();
      if (!input)
        return;
      append({
        content: input,
        role: "user"
      });
      setInput("");
    },
    [input, append]
  );
  const handleInputChange = (e) => {
    setInput(e.target.value);
  };
  return {
    messages,
    error,
    append,
    reload,
    stop,
    setMessages,
    input,
    setInput,
    handleInputChange,
    handleSubmit,
    isLoading: isMutating
  };
}

export {
  useChat
};
